# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JXjVZWTbsk2bwvhGxduDQaQPPJUNTAIf
"""

# запуск: python app.py
# запуск: streamlit run app.py
# остановка: ^Z (control Z)

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

import base64
from io import BytesIO

from seaborn import histplot

def to_excel(df):
    output = BytesIO()
    writer = pd.ExcelWriter(output, engine='xlsxwriter')
    df.to_excel(writer, index = False, sheet_name='Sheet1',float_format="%.2f")
    writer.save()
    processed_data = output.getvalue()
    return processed_data

def get_table_download_link(df):
    """Generates a link allowing the data in a given panda dataframe to be downloaded
    in:  dataframe
    out: href string
    """
    val = to_excel(df)
    b64 = base64.b64encode(val)  # val looks like b'...'
    return f'<a href="data:application/octet-stream;base64,{b64.decode()}" download="Your_File.xlsx">Download Excel file</a>' # decode b'abc' => abc


st.title('Сайт AtomcProfi, выполнила команда Plintus 2.0')
st.write('Сайт позволяет загрузить данные, обработать их и скачать тестовую выборку')


uploaded_files = st.file_uploader("Choose a X_trsin CSV file", accept_multiple_files=True)
flag_1 = False
for uploaded_file in uploaded_files:
        X_train = pd.read_csv(uploaded_file)
        #st.write(X_train)
        flag_1 = True
        

uploaded_files = st.file_uploader("Choose an y_train CSV file", accept_multiple_files=True)
flag_2 = False
for uploaded_file in uploaded_files:
    y_train = pd.read_csv(uploaded_file)
    st.write(y_train)
    
    st.subheader('Histogram y_train')
    
    hist_values = np.histogram(y_train['predicted'].values)[0]
    st.bar_chart(hist_values)
    
    flag_2 = True
    
    
if flag_1 == True and flag_2 == True:

    st.subheader('y_test')

    data = pd.read_csv('my_pred_Ridge.csv')
    st.write(data)

    st.markdown(get_table_download_link(data), unsafe_allow_html=True)


    st.subheader('Histogram y_test')
    hist_values = np.histogram(data['predicted'].values)[0]
    st.bar_chart(hist_values)

    st.markdown("## Party time!")
    st.write("Yay! You're done with this competition. Click below to celebrate.")
    btn = st.button("Celebrate!")
    if btn:
        st.balloons()
